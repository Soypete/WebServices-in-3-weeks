// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getAUsersGames = `-- name: GetAUsersGames :many
SELECT games.id, host, players, answer, questions, guesses, start_time, end_time, ended, users.id, username, created_at FROM games
join users on users.id = games.user_id
WHERE users.username = $1
`

type GetAUsersGamesRow struct {
	ID        int32
	Host      string
	Players   []string
	Answer    string
	Questions []string
	Guesses   []string
	StartTime time.Time
	EndTime   sql.NullTime
	Ended     sql.NullBool
	ID_2      int32
	Username  string
	CreatedAt time.Time
}

func (q *Queries) GetAUsersGames(ctx context.Context, username string) ([]Games, error) {
	query := `select 
		host, 
		players, 
		answer, 
		questions, 
		guesses, 
		start_time, 
		end_time, 
		ended from games
		join users on users.id = games.player
		WHERE users.username = $1;`

}

// func (q *Queries) GetAUsersGames(ctx context.Context, username string) ([]GetAUsersGamesRow, error) {
// 	rows, err := q.db.QueryContext(ctx, getAUsersGames, username)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()
// 	var items []GetAUsersGamesRow
// 	for rows.Next() {
// 		var i GetAUsersGamesRow
// 		if err := rows.Scan(
// 			&i.ID,
// 			&i.Host,
// 			pq.Array(&i.Players),
// 			&i.Answer,
// 			pq.Array(&i.Questions),
// 			pq.Array(&i.Guesses),
// 			&i.StartTime,
// 			&i.EndTime,
// 			&i.Ended,
// 			&i.ID_2,
// 			&i.Username,
// 			&i.CreatedAt,
// 		); err != nil {
// 			return nil, err
// 		}
// 		items = append(items, i)
// 	}
// 	if err := rows.Close(); err != nil {
// 		return nil, err
// 	}
// 	if err := rows.Err(); err != nil {
// 		return nil, err
// 	}
// 	return items, nil
// }

const getUser = `-- name: GetUser :one
SELECT id, username, created_at FROM users 
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
INSERT INTO users 
(username) VALUES ($1)
ON CONFLICT (username) 
DO NOTHING
`

func (q *Queries) UpdateUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, updateUser, username)
	return err
}
